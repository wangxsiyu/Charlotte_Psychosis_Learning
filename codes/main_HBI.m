%% setup directory
clear
if ismac
    fullpt = '/Volumes/Lab/Lab_Averbeck/Projects_Averbeck/Project_Charlotte/Codes_Charlotte';
    outputdir = '/Volumes/Lab/Lab_Averbeck/Projects_Averbeck/Project_Charlotte/results';
    datadir = '/Volumes/Lab/Lab_Averbeck/Projects_Averbeck/Project_Charlotte/data';
elseif ispc
    [~,sysname] = system('hostname');
    sysname = strip(sysname);
    switch sysname
        case 'MH02217045DT' % i9 PC - remote NIH
            fullpt = 'E:\Project_Charlotte\codes';
            outputdir = 'E:\Project_Charlotte\results';
            datadir = 'E:\Project_Charlotte\data';
            rg = 7:11;
        case 'MH02217195LT'
            fullpt = 'C:\wangxsiyu\COL_Project_Charlotte\codes';
            outputdir = 'C:\wangxsiyu\COL_Project_Charlotte\results';
            datadir = 'C:\wangxsiyu\COL_Project_Charlotte\data';
            rg = 1:6;
    end
end
bayesdata = importdata(fullfile(datadir, 'bayes_Charlotte.mat'));
%%
mi = 0;
% model minimum
mi = mi + 1;
params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
    'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
    'beta_sub'};
modelfile{mi} = fullfile(fullpt,'/Models/model_basic.txt');
outfile{mi} = fullfile(outputdir,'resultCharlotte_basic');
init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
    'alpha_n2X5', zeros(2,5), ...
    'alpha_p2X5', ones(2,5), ...
    'beta_n2X5', zeros(2,5), ...
    'beta_p2X5', ones(2,5));
% % model memory
% mi = mi + 1;
% params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
%     'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
%     'beta_sub'};
% modelfile{mi} = fullfile(fullpt,'/Models/model_memory.txt');
% outfile{mi} = fullfile(outputdir, 'resultCharlotte_memory');
% init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
%     'alpha_n2X5', zeros(2,5), ...
%     'alpha_p2X5', ones(2,5), ...
%     'beta_n2X5', zeros(2,5), ...
%     'beta_p2X5', ones(2,5));
% % model memory + forget
% mi = mi + 1;
% params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
%     'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
%     'beta_sub','memrate'};
% modelfile{mi} = fullfile(fullpt,'/Models/model_memory_forget.txt');
% outfile{mi} = fullfile(outputdir, 'resultCharlotte_memory_forget');
% init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
%     'alpha_n2X5', zeros(2,5), ...
%     'alpha_p2X5', ones(2,5), ...
%     'beta_n2X5', zeros(2,5), ...
%     'beta_p2X5', ones(2,5), ...
%     'memrate', ones(2,3)/2);
% % model memory + forget + b0
% mi = mi + 1;
% params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
%     'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
%     'beta_sub','memrate','b0'};
% modelfile{mi} = fullfile(fullpt,'Models','model_memory_forget_initialB.txt');
% outfile{mi} = fullfile(outputdir, 'resultCharlotte_memory_forget_initialB');
% init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
%     'alpha_n2X5', zeros(2,5), ...
%     'alpha_p2X5', ones(2,5), ...
%     'beta_n2X5', zeros(2,5), ...
%     'beta_p2X5', ones(2,5), ...
%     'memrate', ones(2,3)/2, ...
%     'b0', zeros(2,3));
% % model memory + forget + b0 + 2alpha
% mi = mi + 1;
% params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
%     'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
%     'beta_sub','memrate','b0'};
% modelfile{mi} = fullfile(fullpt,'Models','model_memory_forget_initialB_2alpha.txt');
% outfile{mi} = fullfile(outputdir, 'resultCharlotte_memory_forget_initialB_2alpha');
% init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
%     'alpha_n2X5', zeros(2,5), ...
%     'alpha_p2X5', ones(2,5,2), ...
%     'beta_n2X5', zeros(2,5), ...
%     'beta_p2X5', ones(2,5), ...
%     'memrate', ones(2,3)/2, ...
%     'b0', zeros(2,3));
% % reduced model - memory + forget
% mi = mi + 1;
% params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
%     'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
%     'beta_sub','memrate'};
% modelfile{mi} = fullfile(fullpt,'/Models/model_memory_forget_reduced.txt');
% outfile{mi} = fullfile(outputdir, 'resultCharlotte_memory_forget_reduced');
% init0{mi} = struct('Noise_k_p2X5', ones(1,3), 'Noise_lambda_p2X5', ones(1,3), ...
%     'alpha_n2X5', ones(2,3)/2, ...
%     'alpha_p2X5', ones(2,3), ...
%     'beta_n2X5', zeros(2,3), ...
%     'beta_p2X5', ones(2,3), ...
%     'memrate', ones(1,3)/2);
% % reduced model - memory + forget + 2alpha
% mi = mi + 1;
% params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
%     'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
%     'beta_sub','memrate'};
% modelfile{mi} = fullfile(fullpt,'/Models/model_memory_forget_reduced_2alpha.txt');
% outfile{mi} = fullfile(outputdir, 'resultCharlotte_memory_forget_reduced_2alpha');
% init0{mi} = struct('Noise_k_p2X5', ones(1,3), 'Noise_lambda_p2X5', ones(1,3), ...
%     'alpha_n2X5', ones(2,3,2)/2, ...
%     'alpha_p2X5', ones(2,3,2), ...
%     'beta_n2X5', zeros(2,3), ...
%     'beta_p2X5', ones(2,3), ...
%     'memrate', ones(1,3)/2);
% % reduced model - memory + forget + initialB + 2alpha
% mi = mi + 1;
% params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
%     'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
%     'beta_sub','memrate','b0'};
% modelfile{mi} = fullfile(fullpt,'/Models/model_memory_forget_reduced_initialB_2alpha.txt');
% outfile{mi} = fullfile(outputdir, 'resultCharlotte_memory_forget_reduced_initialB_2alpha');
% init0{mi} = struct('Noise_k_p2X5', ones(1,3), 'Noise_lambda_p2X5', ones(1,3), ...
%     'alpha_n2X5', ones(2,3,2)/2, ...
%     'alpha_p2X5', ones(2,3,2), ...
%     'beta_n2X5', zeros(2,3), ...
%     'beta_p2X5', ones(2,3), ...
%     'memrate', ones(1,3)/2, ...
%     'b0', zeros(2,3));
% % reduced model - memory + forget + initialB + 2alpha(wl)
% mi = mi + 1;
% params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
%     'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
%     'beta_sub','memrate','b0'};
% modelfile{mi} = fullfile(fullpt,'/Models/model_memory_forget_reduced_initialB_2alphawl.txt');
% outfile{mi} = fullfile(outputdir, 'resultCharlotte_memory_forget_reduced_initialB_2alphawl');
% init0{mi} = struct('Noise_k_p2X5', ones(1,3), 'Noise_lambda_p2X5', ones(1,3), ...
%     'alpha_n2X5', ones(2,3,2)/2, ...
%     'alpha_p2X5', ones(2,3,2), ...
%     'beta_n2X5', zeros(2,3), ...
%     'beta_p2X5', ones(2,3), ...
%     'memrate', ones(1,3)/2, ...
%     'b0', zeros(2,3));
% model minimum initialB
mi = mi + 1;
params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
    'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
    'beta_sub','b0'};
modelfile{mi} = fullfile(fullpt,'/Models/model_basic_initialB.txt');
outfile{mi} = fullfile(outputdir,'resultCharlotte_basic_initialB');
init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
    'alpha_n2X5', ones(2,5)/2, ...
    'alpha_p2X5', ones(2,5), ...
    'beta_n2X5', zeros(2,5), ...
    'beta_p2X5', ones(2,5),...
    'b0', zeros(2,3));
% model minimum initialB
mi = mi + 1;
params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
    'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
    'beta_sub','b0'};
modelfile{mi} = fullfile(fullpt,'/Models/model_basic_initialB_2alpha.txt');
outfile{mi} = fullfile(outputdir,'resultCharlotte_basic_initialB_2alpha');
init0{mi} = struct('Noise_k_p2X5', ones(2,3), 'Noise_lambda_p2X5', ones(2,3), ...
    'alpha_n2X5', ones(2,3,2)/2, ...
    'alpha_p2X5', ones(2,3,2), ...
    'beta_n2X5', zeros(2,3), ...
    'beta_p2X5', ones(2,5),...
    'b0', zeros(2,3));
% model minimum initialB
mi = mi + 1;
params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
    'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
    'beta_sub','b0'};
modelfile{mi} = fullfile(fullpt,'/Models/model_basic_initialB_2alphawl.txt');
outfile{mi} = fullfile(outputdir,'resultCharlotte_basic_initialB_2alphawl');
init0{mi} = struct('Noise_k_p2X5', ones(2,3), 'Noise_lambda_p2X5', ones(2,3), ...
    'alpha_n2X5', ones(2,3,2)/2, ...
    'alpha_p2X5', ones(2,3,2), ...
    'beta_n2X5', zeros(2,3), ...
    'beta_p2X5', ones(2,5),...
    'b0', zeros(2,3));
% model minimum initialB
mi = mi + 1;
params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
    'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
    'beta_sub'};
modelfile{mi} = fullfile(fullpt,'/Models/model_basic_2alpha.txt');
outfile{mi} = fullfile(outputdir,'resultCharlotte_basic_2alpha');
init0{mi} = struct('Noise_k_p2X5', ones(2,3), 'Noise_lambda_p2X5', ones(2,3), ...
    'alpha_n2X5', ones(2,3,2)/2, ...
    'alpha_p2X5', ones(2,3,2), ...
    'beta_n2X5', zeros(2,3), ...
    'beta_p2X5', ones(2,5));
% model forget term
mi = mi + 1;
params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
    'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
    'beta_sub'};
modelfile{mi} = fullfile(fullpt,'/Models/model_forget.txt');
outfile{mi} = fullfile(outputdir,'resultCharlotte_forget');
init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
    'alpha_n2X5', zeros(2,5), ...
    'alpha_p2X5', ones(2,5), ...
    'beta_n2X5', zeros(2,5), ...
    'beta_p2X5', ones(2,5));
% model forget term
mi = mi + 1;
params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
    'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
    'beta_sub'};
modelfile{mi} = fullfile(fullpt,'/Models/model_forget_both.txt');
outfile{mi} = fullfile(outputdir,'resultCharlotte_forget_both');
init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
    'alpha_n2X5', zeros(2,5), ...
    'alpha_p2X5', ones(2,5), ...
    'beta_n2X5', zeros(2,5), ...
    'beta_p2X5', ones(2,5));
% model forget term
mi = mi + 1;
params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
    'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
    'beta_sub'};
modelfile{mi} = fullfile(fullpt,'/Models/model_forget_nodrift.txt');
outfile{mi} = fullfile(outputdir,'resultCharlotte_forget_nodrift');
init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
    'alpha_n2X5', zeros(2,5), ...
    'alpha_p2X5', ones(2,5), ...
    'beta_n2X5', zeros(2,5), ...
    'beta_p2X5', ones(2,5));
% model forget term
mi = mi + 1;
params{mi} = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_n2X5', 'alpha_p2X5', ...
    'beta_n2X5', 'beta_p2X5', 'Q', 'Noise_sub', 'alpha_sub', ...
    'beta_sub'};
modelfile{mi} = fullfile(fullpt,'/Models/model_forget_both_nodrift.txt');
outfile{mi} = fullfile(outputdir,'resultCharlotte_forget_both_nodrift');
init0{mi} = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
    'alpha_n2X5', zeros(2,5), ...
    'alpha_p2X5', ones(2,5), ...
    'beta_n2X5', zeros(2,5), ...
    'beta_p2X5', ones(2,5));
%% run
for mmi = 6:9
    bayes_params = [];
    bayes_params.nchains = 4; % How Many Chains?
    bayes_params.nburnin = 3000; % How Many Burn-in Samples?
    bayes_params.nsamples = 2000;
%     bayes_params = 'yes';
    SW.print('log', 'running model %d/%d: %s', mmi,mi,modelfile{mmi});
    SW_JAGS(bayesdata, modelfile{mmi}, outfile{mmi}, params{mmi}, init0{mmi}, bayes_params);
end
%% model minimum
% outputdir = '/Volumes/Lab/Lab_Averbeck/Projects_Averbeck/Project_Charlotte';
% load(fullfile(outputdir, 'bayes_Charlotte'));
% params = {'Noise_k_p2X5','Noise_lambda_p2X5','alpha_emotion_n2X5', ...
%     'prior_emotion', 'bias_n2X5', 'Q', 'P'};
% modelfile = '/Volumes/Lab/Lab_Averbeck/Projects_Averbeck/Project_Charlotte/model_minimum.txt';
% outfile = 'resultCharlotte_minimum';
% init0 = struct('Noise_k_p2X5', ones(2,5), 'Noise_lambda_p2X5', ones(2,5), ...
%     'alpha_emotion_n2X5', zeros(2,5), ...
%     'prior_emotion', repmat(0.5, 2, 5, 2), ...
%     'bias_n2X5', zeros(2,5));
% istest = [];%'no';
% SW_JAGS(bayesdata, modelfile, outfile, params, init0, istest);
